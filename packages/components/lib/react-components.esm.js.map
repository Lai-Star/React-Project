{"version":3,"file":"react-components.esm.js","sources":["../src/utils/getClient.ts","../src/utils/shallowEqual.ts","../src/Query.tsx","../src/Mutation.tsx","../src/Subscription.tsx","../src/ssr/getDataFromTree.ts","../src/ssr/renderToStringWithData.ts","../src/useApolloClient.ts"],"sourcesContent":["import ApolloClient from 'apollo-client';\nimport { invariant } from 'ts-invariant';\n\nimport { ApolloContextValue } from '@apollo/react-common';\n\nexport interface CommonComponentProps {\n  client?: ApolloClient<Object>;\n}\n\nexport function getClient(\n  props: CommonComponentProps,\n  context: ApolloContextValue,\n): ApolloClient<Object> {\n  const client = props.client || context.client;\n\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as a prop. ' +\n      'Wrap the root component in an <ApolloProvider>, or pass an ' +\n      'ApolloClient instance in via props.',\n  );\n\n  return client as ApolloClient<Object>;\n}\n","const { hasOwnProperty } = Object.prototype;\n\nfunction is(x: any, y: any) {\n  if (x === y) {\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  }\n  return x !== x && y !== y;\n}\n\nfunction isObject(obj: any): obj is { [key: string]: any } {\n  return obj !== null && typeof obj === \"object\";\n}\n\nexport default function shallowEqual(objA: any, objB: any) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (!isObject(objA) || !isObject(objB)) {\n    return false;\n  }\n\n  const keys = Object.keys(objA);\n\n  if (keys.length !== Object.keys(objB).length) {\n    return false;\n  }\n\n  return keys.every(\n    key => hasOwnProperty.call(objB, key) && is(objA[key], objB[key]),\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ApolloClient, {\n  ObservableQuery,\n  ApolloError,\n  ApolloQueryResult,\n  NetworkStatus,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n} from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport { ZenObservable } from 'zen-observable-ts';\nimport {\n  getApolloContext,\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  IDocumentDefinition,\n} from '@apollo/react-common';\nimport isEqual from 'lodash.isequal';\nimport { invariant } from 'ts-invariant';\n\nimport { OperationVariables, QueryOpts } from './types';\nimport { getClient } from './utils/getClient';\nimport shallowEqual from './utils/shallowEqual';\n\nexport type ObservableQueryFields<TData, TVariables> = Pick<\n  ObservableQuery<TData, TVariables>,\n  | 'startPolling'\n  | 'stopPolling'\n  | 'subscribeToMore'\n  | 'updateQuery'\n  | 'refetch'\n  | 'variables'\n> & {\n  fetchMore: (<K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>,\n  ) => Promise<ApolloQueryResult<TData>>) &\n    (<TData2, TVariables2, K extends keyof TVariables2>(\n      fetchMoreOptions: { query: DocumentNode } & FetchMoreQueryOptions<\n        TVariables2,\n        K\n      > &\n        FetchMoreOptions<TData2, TVariables2>,\n    ) => Promise<ApolloQueryResult<TData2>>);\n};\n\nfunction observableQueryFields<TData, TVariables>(\n  observable: ObservableQuery<TData, TVariables>,\n): ObservableQueryFields<TData, TVariables> {\n  const fields = {\n    variables: observable.variables,\n    refetch: observable.refetch.bind(observable),\n    fetchMore: observable.fetchMore.bind(observable),\n    updateQuery: observable.updateQuery.bind(observable),\n    startPolling: observable.startPolling.bind(observable),\n    stopPolling: observable.stopPolling.bind(observable),\n    subscribeToMore: observable.subscribeToMore.bind(observable),\n  };\n  // TODO: Need to cast this because we improved the type of `updateQuery` to be parametric\n  // on variables, while the type in Apollo client just has object.\n  // Consider removing this when that is properly typed\n  return fields as ObservableQueryFields<TData, TVariables>;\n}\n\nexport interface QueryResult<TData = any, TVariables = OperationVariables>\n  extends ObservableQueryFields<TData, TVariables> {\n  client: ApolloClient<any>;\n  data: TData | undefined;\n  error?: ApolloError;\n  loading: boolean;\n  networkStatus: NetworkStatus;\n}\n\nexport interface QueryProps<TData = any, TVariables = OperationVariables>\n  extends QueryOpts<TVariables> {\n  children: (result: QueryResult<TData, TVariables>) => React.ReactNode;\n  query: DocumentNode;\n  displayName?: string;\n  skip?: boolean;\n  onCompleted?: (data: TData) => void;\n  onError?: (error: ApolloError) => void;\n}\n\nexport class Query<\n  TData = any,\n  TVariables = OperationVariables\n> extends React.Component<QueryProps<TData, TVariables>> {\n  static propTypes = {\n    client: PropTypes.object,\n    children: PropTypes.func.isRequired,\n    fetchPolicy: PropTypes.string,\n    notifyOnNetworkStatusChange: PropTypes.bool,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    pollInterval: PropTypes.number,\n    query: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    ssr: PropTypes.bool,\n    partialRefetch: PropTypes.bool,\n  };\n\n  private previousClient?: ApolloClient<Object>;\n\n  // Note that we delete `observableQuerySubscription` if we unsubscribe but\n  // never delete `observableQuery` once it is created. We only delete\n  // `observableQuery` when we unmount the component.\n  private observableQuery?: ObservableQuery<TData, TVariables> | null;\n  private observableQuerySubscription?: ZenObservable.Subscription;\n\n  private previousQuery?: DocumentNode;\n  private hasMounted: boolean = false;\n  private operation?: IDocumentDefinition;\n  private previousOptions: {} | null = null;\n  private previousResult: ApolloQueryResult<TData> | null = null;\n\n  componentDidMount() {\n    this.hasMounted = true;\n  }\n\n  componentDidUpdate(prevProps: QueryProps<TData, TVariables>) {\n    const isDiffRequest =\n      !isEqual(prevProps.query, this.props.query) ||\n      !isEqual(prevProps.variables, this.props.variables);\n    if (isDiffRequest) {\n      // If specified, `onError` / `onCompleted` callbacks are called here\n      // after local cache results are loaded.\n      this.handleErrorOrCompleted();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeQuerySubscription();\n    this.hasMounted = false;\n  }\n\n  render(): React.ReactNode {\n    const ApolloContext = getApolloContext();\n    return (\n      <ApolloContext.Consumer>\n        {(context: ApolloContextValue) => {\n          return this.renderData(context);\n        }}\n      </ApolloContext.Consumer>\n    );\n  }\n\n  // For server-side rendering (see getDataFromTree.ts)\n  fetchData(\n    client: ApolloClient<object>,\n    context: ApolloContextValue,\n  ): Promise<ApolloQueryResult<any>> | boolean {\n    if (this.props.skip) return false;\n\n    // pull off react options\n    const {\n      children,\n      ssr,\n      displayName,\n      skip,\n      onCompleted,\n      onError,\n      partialRefetch,\n      ...opts\n    } = this.props;\n\n    let { fetchPolicy } = opts;\n    if (ssr === false) return false;\n    if (fetchPolicy === 'network-only' || fetchPolicy === 'cache-and-network') {\n      fetchPolicy = 'cache-first'; // ignore force fetch in SSR;\n    }\n\n    const observable = client.watchQuery({\n      ...opts,\n      fetchPolicy,\n    });\n\n    // Register the SSR observable, so it can be re-used once the value comes back.\n    if (context && context.renderPromises) {\n      context.renderPromises.registerSSRObservable(this, observable);\n    }\n\n    const result = this.observableQuery!.getCurrentResult();\n    return result.loading ? observable.result() : false;\n  }\n\n  private extractOptsFromProps(props: QueryProps<TData, TVariables>) {\n    this.operation = parser(props.query);\n\n    invariant(\n      this.operation.type === DocumentType.Query,\n      `The <Query /> component requires a graphql query, but got a ${\n        this.operation.type === DocumentType.Mutation\n          ? 'mutation'\n          : 'subscription'\n      }.`,\n    );\n\n    const displayName = props.displayName || 'Query';\n\n    return {\n      ...props,\n      displayName,\n      context: props.context || {},\n      metadata: { reactComponent: { displayName } },\n    };\n  }\n\n  private initializeObservableQuery(\n    client: ApolloClient<object>,\n    props: QueryProps<TData, TVariables>,\n    context: ApolloContextValue,\n  ) {\n    // See if there is an existing observable that was used to fetch the same data and\n    // if so, use it instead since it will contain the proper queryId to fetch\n    // the result set. This is used during SSR.\n    if (context && context.renderPromises) {\n      this.observableQuery = context.renderPromises.getSSRObservable(this);\n    }\n\n    if (!this.observableQuery) {\n      const options = this.extractOptsFromProps(props);\n      this.previousOptions = { ...options, children: null };\n      this.observableQuery = client.watchQuery(options);\n    }\n  }\n\n  private updateObservableQuery(\n    client: ApolloClient<object>,\n    context: ApolloContextValue,\n  ) {\n    // if we skipped initially, we may not have yet created the observable\n    if (!this.observableQuery) {\n      this.initializeObservableQuery(client, this.props, context);\n    }\n\n    const newOptions = {\n      ...this.extractOptsFromProps(this.props),\n      children: null,\n    };\n\n    if (!isEqual(newOptions, this.previousOptions)) {\n      this.previousOptions = newOptions;\n      this.observableQuery!.setOptions(newOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => null);\n    }\n  }\n\n  private startQuerySubscription = (client: ApolloClient<object>) => {\n    if (this.observableQuerySubscription) return;\n\n    this.observableQuerySubscription = this.observableQuery!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const { previousResult } = this;\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          shallowEqual(previousResult.data, data || {})\n        ) {\n          return;\n        }\n\n        this.updateCurrentData();\n      },\n      error: error => {\n        const { previousResult } = this;\n        if (\n          !previousResult ||\n          previousResult.networkStatus === NetworkStatus.refetch\n        ) {\n          this.resubscribeToQuery(client);\n        }\n\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n        this.updateCurrentData();\n      },\n    });\n  };\n\n  private removeQuerySubscription = () => {\n    if (this.observableQuerySubscription) {\n      this.observableQuerySubscription.unsubscribe();\n      delete this.observableQuerySubscription;\n    }\n  };\n\n  private resubscribeToQuery(client: ApolloClient<object>) {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.observableQuery!.getLastError();\n    const lastResult = this.observableQuery!.getLastResult();\n    this.observableQuery!.resetLastResults();\n    this.startQuerySubscription(client);\n    Object.assign(this.observableQuery!, { lastError, lastResult });\n  }\n\n  private updateCurrentData = () => {\n    // If specified, `onError` / `onCompleted` callbacks are called here\n    // after a network based Query result has been received.\n    this.handleErrorOrCompleted();\n\n    if (this.hasMounted) this.forceUpdate();\n  };\n\n  private handleErrorOrCompleted = () => {\n    const result = this.observableQuery!.getCurrentResult();\n    const { data, loading, error } = result;\n    const { onCompleted, onError } = this.props;\n    if (onCompleted && !loading && !error) {\n      onCompleted(data as TData);\n    } else if (onError && !loading && error) {\n      onError(error);\n    }\n  };\n\n  private getQueryResult = (\n    client: ApolloClient<object>,\n  ): QueryResult<TData, TVariables> => {\n    let result = {\n      data: Object.create(null) as TData,\n    } as any;\n\n    // Attach bound methods\n    Object.assign(result, observableQueryFields(this.observableQuery!));\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (this.props.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.observableQuery!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n      data = data || (Object.create(null) as TData);\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error props.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      Object.assign(result, { loading, networkStatus, error });\n\n      if (loading) {\n        const previousData = this.previousResult\n          ? this.previousResult.data\n          : {};\n        Object.assign(result.data, previousData, data);\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.observableQuery!.getLastResult() || {}).data,\n        });\n      } else {\n        const { fetchPolicy } = this.observableQuery!.options;\n        const { partialRefetch } = this.props;\n        if (\n          partialRefetch &&\n          Object.keys(data).length === 0 &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as an empty Object since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n          });\n          result.refetch();\n          return result;\n        }\n\n        Object.assign(result.data, data);\n      }\n    }\n\n    result.client = client;\n    this.previousResult = result;\n    return result;\n  };\n\n  private currentClient(context: any) {\n    const client = getClient(this.props, context);\n    if (this.previousClient !== client) {\n      this.previousClient = client;\n      this.removeQuerySubscription();\n      this.observableQuery = null;\n      this.previousResult = null;\n    }\n    return client;\n  }\n\n  private renderData(context: ApolloContextValue): React.ReactNode {\n    const client = this.currentClient(context);\n\n    const { skip, query } = this.props;\n    if (skip || query !== this.previousQuery) {\n      this.removeQuerySubscription();\n      this.observableQuery = null;\n      this.previousQuery = query;\n    }\n\n    this.updateObservableQuery(client, context);\n\n    if (!skip) {\n      this.startQuerySubscription(client);\n    }\n\n    const finish = () => this.props.children(this.getQueryResult(client));\n    if (context && context.renderPromises) {\n      return context.renderPromises.addQueryPromise(\n        this,\n        finish,\n        client,\n        context,\n      );\n    }\n    return finish();\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ApolloClient, {\n  PureQueryOptions,\n  ApolloError,\n  FetchPolicy,\n} from 'apollo-client';\nimport { DataProxy } from 'apollo-cache';\nimport { invariant } from 'ts-invariant';\nimport { DocumentNode, GraphQLError } from 'graphql';\nimport {\n  getApolloContext,\n  ApolloContextValue,\n  parser,\n  DocumentType,\n} from '@apollo/react-common';\n\nimport { OperationVariables, RefetchQueriesProviderFn } from './types';\nimport { getClient } from './utils/getClient';\n\nexport interface MutationResult<TData = Record<string, any>> {\n  data?: TData;\n  error?: ApolloError;\n  loading: boolean;\n  called: boolean;\n  client: ApolloClient<Object>;\n}\n\nexport interface ExecutionResult<T = Record<string, any>> {\n  data?: T;\n  extensions?: Record<string, any>;\n  errors?: GraphQLError[];\n}\n\nexport declare type MutationUpdaterFn<\n  T = {\n    [key: string]: any;\n  }\n> = (proxy: DataProxy, mutationResult: FetchResult<T>) => void;\n\nexport declare type FetchResult<\n  TData = Record<string, any>,\n  C = Record<string, any>,\n  E = Record<string, any>\n> = ExecutionResult<TData> & {\n  extensions?: E;\n  context?: C;\n};\n\nexport declare type MutationOptions<\n  TData = Record<string, any>,\n  TVariables = OperationVariables\n> = {\n  variables?: TVariables;\n  optimisticResponse?: TData;\n  refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesProviderFn;\n  awaitRefetchQueries?: boolean;\n  update?: MutationUpdaterFn<TData>;\n  context?: Record<string, any>;\n  fetchPolicy?: FetchPolicy;\n};\n\nexport declare type MutationFn<TData = any, TVariables = OperationVariables> = (\n  options?: MutationOptions<TData, TVariables>,\n) => Promise<void | FetchResult<TData>>;\n\nexport interface MutationProps<TData = any, TVariables = OperationVariables> {\n  client?: ApolloClient<Object>;\n  mutation: DocumentNode;\n  ignoreResults?: boolean;\n  optimisticResponse?: TData;\n  variables?: TVariables;\n  refetchQueries?: Array<string | PureQueryOptions> | RefetchQueriesProviderFn;\n  awaitRefetchQueries?: boolean;\n  update?: MutationUpdaterFn<TData>;\n  children: (\n    mutateFn: MutationFn<TData, TVariables>,\n    result: MutationResult<TData>,\n  ) => React.ReactNode;\n  onCompleted?: (data: TData) => void;\n  onError?: (error: ApolloError) => void;\n  context?: Record<string, any>;\n  fetchPolicy?: FetchPolicy;\n}\n\nexport interface MutationState<TData = any> {\n  called: boolean;\n  loading: boolean;\n  error?: ApolloError;\n  data?: TData;\n}\n\nexport class Mutation<\n  TData = any,\n  TVariables = OperationVariables\n> extends React.Component<\n  MutationProps<TData, TVariables>,\n  MutationState<TData>\n> {\n  static contextType = getApolloContext();\n\n  static propTypes = {\n    mutation: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    optimisticResponse: PropTypes.object,\n    refetchQueries: PropTypes.oneOfType([\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n      ),\n      PropTypes.func,\n    ]),\n    awaitRefetchQueries: PropTypes.bool,\n    update: PropTypes.func,\n    children: PropTypes.func.isRequired,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    fetchPolicy: PropTypes.string,\n  };\n\n  private mostRecentMutationId: number;\n  private hasMounted: boolean = false;\n\n  constructor(\n    props: MutationProps<TData, TVariables>,\n    context: ApolloContextValue,\n  ) {\n    super(props, context);\n    this.verifyDocumentIsMutation(props.mutation);\n    this.mostRecentMutationId = 0;\n    this.state = {\n      called: false,\n      loading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.hasMounted = true;\n  }\n\n  componentDidUpdate(prevProps: MutationProps<TData, TVariables>) {\n    if (this.props.mutation !== prevProps.mutation) {\n      this.verifyDocumentIsMutation(this.props.mutation);\n    }\n  }\n\n  componentWillUnmount() {\n    this.hasMounted = false;\n  }\n\n  render() {\n    const { children } = this.props;\n    const { loading, data, error, called } = this.state;\n\n    const result = {\n      called,\n      loading,\n      data,\n      error,\n      client: this.currentClient(),\n    };\n\n    return children(this.runMutation, result);\n  }\n\n  private runMutation = (options: MutationOptions<TData, TVariables> = {}) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(options)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((e: ApolloError) => {\n        this.onMutationError(e, mutationId);\n        if (!this.props.onError) throw e;\n      });\n  };\n\n  private mutate = (options: MutationOptions<TData, TVariables>) => {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context = {},\n      awaitRefetchQueries = false,\n      fetchPolicy,\n    } = this.props;\n    const mutateOptions = { ...options };\n\n    let refetchQueries =\n      mutateOptions.refetchQueries || this.props.refetchQueries;\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables,\n    );\n    delete mutateOptions.variables;\n\n    return this.currentClient().mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions,\n    });\n  };\n\n  private onMutationStart = () => {\n    if (!this.state.loading && !this.props.ignoreResults) {\n      this.setState({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true,\n      });\n    }\n  };\n\n  private onMutationCompleted = (\n    response: ExecutionResult<TData>,\n    mutationId: number,\n  ) => {\n    const { onCompleted, ignoreResults } = this.props;\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (\n      this.hasMounted &&\n      this.isMostRecentMutation(mutationId) &&\n      !ignoreResults\n    ) {\n      this.setState({ loading: false, data, error }, callOncomplete);\n    } else {\n      callOncomplete();\n    }\n  };\n\n  private onMutationError = (error: ApolloError, mutationId: number) => {\n    const { onError } = this.props;\n    const callOnError = () => (onError ? onError(error) : null);\n\n    if (this.hasMounted && this.isMostRecentMutation(mutationId)) {\n      this.setState({ loading: false, error }, callOnError);\n    } else {\n      callOnError();\n    }\n  };\n\n  private generateNewMutationId = (): number => {\n    this.mostRecentMutationId = this.mostRecentMutationId + 1;\n    return this.mostRecentMutationId;\n  };\n\n  private isMostRecentMutation = (mutationId: number) => {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  private verifyDocumentIsMutation = (mutation: DocumentNode) => {\n    const operation = parser(mutation);\n    invariant(\n      operation.type === DocumentType.Mutation,\n      `The <Mutation /> component requires a graphql mutation, but got a ${\n        operation.type === DocumentType.Query ? 'query' : 'subscription'\n      }.`,\n    );\n  };\n\n  private currentClient() {\n    return getClient(this.props, this.context);\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ApolloClient, { ApolloError, FetchPolicy } from 'apollo-client';\nimport { Observable } from 'apollo-link';\nimport { DocumentNode } from 'graphql';\nimport { ZenObservable } from 'zen-observable-ts';\nimport { getApolloContext, ApolloContextValue } from '@apollo/react-common';\n\nimport { OperationVariables } from './types';\nimport { getClient } from './utils/getClient';\nimport shallowEqual from './utils/shallowEqual';\n\nexport interface SubscriptionResult<TData = any> {\n  loading: boolean;\n  data?: TData;\n  error?: ApolloError;\n}\n\nexport interface OnSubscriptionDataOptions<TData = any> {\n  client: ApolloClient<Object>;\n  subscriptionData: SubscriptionResult<TData>;\n}\n\nexport interface SubscriptionProps<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  subscription: DocumentNode;\n  variables?: TVariables;\n  fetchPolicy?: FetchPolicy;\n  shouldResubscribe?: any;\n  client?: ApolloClient<Object>;\n  onSubscriptionData?: (options: OnSubscriptionDataOptions<TData>) => any;\n  onSubscriptionComplete?: () => void;\n  children?: (result: SubscriptionResult<TData>) => React.ReactNode;\n}\n\nexport interface SubscriptionState<TData = any> {\n  loading: boolean;\n  data?: TData;\n  error?: ApolloError;\n}\n\nexport class Subscription<\n  TData = any,\n  TVariables = any\n> extends React.Component<\n  SubscriptionProps<TData, TVariables>,\n  SubscriptionState<TData>\n> {\n  static contextType = getApolloContext();\n\n  static propTypes = {\n    subscription: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    children: PropTypes.func,\n    onSubscriptionData: PropTypes.func,\n    onSubscriptionComplete: PropTypes.func,\n    shouldResubscribe: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  };\n\n  private client: ApolloClient<object>;\n  private previousState?: Readonly<SubscriptionState<TData>>;\n  private previousProps?: Readonly<SubscriptionProps<TData, TVariables>>;\n  private observableQuery?: Observable<any>;\n  private observableQuerySubscription?: ZenObservable.Subscription;\n\n  constructor(\n    props: SubscriptionProps<TData, TVariables>,\n    context: ApolloContextValue,\n  ) {\n    super(props, context);\n    this.client = getClient(props, context);\n    this.initialize(props);\n    this.state = this.getInitialState();\n  }\n\n  componentDidMount() {\n    this.startSubscription();\n  }\n\n  componentWillUnmount() {\n    this.endSubscription();\n  }\n\n  render() {\n    let currentState = this.state;\n\n    if (this.newClient()) {\n      currentState = this.getInitialState();\n    }\n\n    let { shouldResubscribe } = this.props;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.props);\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousProps &&\n      (!shallowEqual(this.previousProps.variables, this.props.variables) ||\n        this.previousProps.subscription !== this.props.subscription)\n    ) {\n      this.endSubscription();\n      delete this.observableQuery;\n\n      if (!this.previousState) {\n        currentState = this.getInitialState();\n      }\n    }\n\n    this.initialize(this.props);\n    this.startSubscription();\n\n    const renderFn: any = this.props.children;\n    if (!renderFn) return null;\n\n    const result = { ...currentState, variables: this.props.variables };\n    this.previousState = currentState;\n    this.previousProps = this.props;\n    return renderFn(result);\n  }\n\n  private initialize = (props: SubscriptionProps<TData, TVariables>) => {\n    if (this.observableQuery) return;\n    this.observableQuery = this.client.subscribe({\n      query: props.subscription,\n      variables: props.variables,\n      fetchPolicy: props.fetchPolicy,\n    });\n  };\n\n  private startSubscription = () => {\n    if (this.observableQuerySubscription) return;\n    this.observableQuerySubscription = this.observableQuery!.subscribe({\n      next: this.updateCurrentData,\n      error: this.updateError,\n      complete: this.completeSubscription,\n    });\n  };\n\n  private getInitialState = () => ({\n    loading: true,\n    error: undefined,\n    data: undefined,\n  });\n\n  private updateCurrentData = (result: SubscriptionResult<TData>) => {\n    const {\n      props: { onSubscriptionData },\n    } = this;\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.client,\n        subscriptionData: result,\n      });\n    }\n\n    this.setState(\n      {\n        data: result.data,\n        loading: false,\n        error: undefined,\n      },\n      () => {\n        delete this.previousState;\n      },\n    );\n  };\n\n  private updateError = (error: any) => {\n    this.setState({\n      error,\n      loading: false,\n    });\n  };\n\n  private completeSubscription = () => {\n    const { onSubscriptionComplete } = this.props;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  private endSubscription = () => {\n    if (this.observableQuerySubscription) {\n      this.observableQuerySubscription.unsubscribe();\n      delete this.observableQuerySubscription;\n    }\n  };\n\n  private newClient = () => {\n    let clientChanged = false;\n    const client = getClient(this.props, this.context);\n    if (client !== this.client) {\n      clientChanged = true;\n      this.client = client;\n      this.endSubscription();\n      delete this.observableQuery;\n    }\n    return clientChanged;\n  };\n}\n","import React from 'react';\nimport { ApolloClient, ObservableQuery } from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, ApolloContextValue } from '@apollo/react-common';\n\nimport { Query } from '../Query';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null,\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<Query<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    queryInstance: Query<TData, TVariables>,\n    observable: ObservableQuery<any, TVariables>,\n  ) {\n    this.lookupQueryInfo(queryInstance).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    queryInstance: Query<TData, TVariables>,\n  ) {\n    return this.lookupQueryInfo(queryInstance).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: Query<TData, TVariables>,\n    finish: () => React.ReactNode,\n    client: ApolloClient<object>,\n    context: ApolloContextValue,\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance);\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance,\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData(client, context));\n        }),\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    queryInstance: Query<TData, TVariables>,\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = queryInstance.props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n\nexport function getDataFromTree(\n  tree: React.ReactNode,\n  context: { [key: string]: any } = {},\n) {\n  return getMarkupFromTree({\n    tree,\n    context,\n    // If you need to configure this renderFunction, call getMarkupFromTree\n    // directly instead of getDataFromTree.\n    renderFunction: require('react-dom/server').renderToStaticMarkup,\n  });\n}\n\nexport type GetMarkupFromTreeOptions = {\n  tree: React.ReactNode;\n  context?: { [key: string]: any };\n  renderFunction?: (tree: React.ReactElement<any>) => string;\n};\n\nexport function getMarkupFromTree({\n  tree,\n  context = {},\n  // The rendering function is configurable! We use renderToStaticMarkup as\n  // the default, because it's a little less expensive than renderToString,\n  // and legacy usage of getDataFromTree ignores the return value anyway.\n  renderFunction = require('react-dom/server').renderToStaticMarkup,\n}: GetMarkupFromTreeOptions): Promise<string> {\n  const renderPromises = new RenderPromises();\n\n  function process(): Promise<string> | string {\n    // Always re-render from the rootElement, even though it might seem\n    // better to render the children of the component responsible for the\n    // promise, because it is not possible to reconstruct the full context\n    // of the original rendering (including all unknown context provider\n    // elements) for a subtree of the orginal component tree.\n    const ApolloContext = getApolloContext();\n    const html = renderFunction(\n      React.createElement(\n        ApolloContext.Provider,\n        { value: { ...context, renderPromises } },\n        tree,\n      ),\n    );\n\n    return renderPromises.hasPromises()\n      ? renderPromises.consumeAndAwaitPromises().then(process)\n      : html;\n  }\n\n  return Promise.resolve().then(process);\n}\n","import { ReactElement } from 'react';\nimport { getMarkupFromTree } from './getDataFromTree';\n\nexport function renderToStringWithData(\n  component: ReactElement<any>,\n): Promise<string> {\n  return getMarkupFromTree({\n    tree: component,\n    renderFunction: require('react-dom/server').renderToString,\n  });\n}\n","import React from 'react';\nimport { invariant } from 'ts-invariant';\nimport { getApolloContext } from '@apollo/react-common';\n\nexport function useApolloClient() {\n  const { client } = React.useContext(getApolloContext());\n  invariant(\n    !client,\n    'No Apollo Client instance can be found. Please ensure that you ' +\n      'have called `ApolloProvider` higher up in your tree.',\n  );\n  return client;\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}